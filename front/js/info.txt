
Récapitulatif des différentes tâches page par page

                                                                            ---------------- index.html ----------------
Page d'accueil du site nous devons afficher tout les canapés présent dans l'API.
      - Récupération des infos de l'API via fetch (fonction présente en bas de page).
      - Vérification des données présentes, si j'ai bien compris, dans un array composé d'objets canapé.
      - Boucle parcourant le tableau reçu.
      - Création d'un nouveau bloc identique avec celui présent en commentaire dans la page index en indiquant toutes les infos.
      - Pour le test : vérifier que tout les articles s'affichent bien.


                                                                            ---------------- confirmation.html ----------------
      - Page de confirmation de commande, affichée uniquement si le formulaire de "cart.html" est complet : affiche un numéro de commande unique.
      Il faut voir comment il faut le générer, possiblement un hash de quelque chose etc...


                                                                            ---------------- cart.html ----------------
      - Affiche les articles sélectionnés dans la page product -> Récupération des IDS et quantité choisies par l'utilisateur dans product.html, puis récupération dans l'API.
      - Possibilité de modifier la quantité ainsi que de supprimer l'article.
      - Rappel le prix de chaques articles.
      - Présence du formulaire pour l'achat -> Regex pour chaque champs.
        - Prénom -> Pas de chiffres ni caractères spéciaux.
        - Nom -> Identique
        - Adresse -> Pas de caractères spéciaux.
        - Ville -> Pas de chiffres ni caractères spéciaux.
        - Email -> Deux possibilités ->
          - Grande regex vérifiant s'il y'a bien tout type de caractère compatible avec un mail suivi d'un @ suivi de la 
          même condition puis d'un point suivi d'un domaine connu.
          - Autre façon de faire, on peut prendre ça comme une chaîne de caractère qu'on décompose en 2 grâce à l'@ (si tableau supérieur à 2 cases, il y'en a plusieurs).
          On applique des regex peut-être plus simple


                                                                            ---------------- product.html ----------------
      Affiche les informations d'un produit dont l'ID est communiqué via le lien.
      On récupère l'ID du produit, les produits dans l'API pour afficher toutes les infos et laisser la possibilité à l'utilateur de choisir la couleur et la quantité.
      Bouton "ajouter", qui enregistre dans un tableau (via "push")l'id et la quantité.
      Deux possibilités, on crée un objet contenant l'id du produit avec la quantité, où l'on stock ces informations dans un array[][].
        Si c'est le cas, le choix de la couleur implique t'il un changement d'id du produit ? si non, il faudra stocker cette variable quelque part.
        Pour le stockage, visiblement il existe un "localstorage", voir ce dont il s'agit, sinon peut-être transmission de tout ces éléments via _GET/_POST (php style ?).




fetch("http://localhost:3000/api/products")
  .then(function(res) {
    if (res.ok) {
      return res.json();
    }
  })
  .then(function(value) {
    console.log(value);
  })
  .catch(function(err) {
    // Une erreur est survenue
  });